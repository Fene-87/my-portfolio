"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.exhaustMapToWithTrailing = exports.exhaustMapWithTrailing = void 0;
const rxjs_1 = require("rxjs");
const operators_1 = require("rxjs/operators");
/**
 * Like exhaustMap, but also includes the trailing value emitted from the source observable while waiting for the preceding inner observable to complete
 *
 * Original code adapted from https://github.com/ReactiveX/rxjs/issues/5004
 * @param {function<T, K>(value: T, ?index: number): ObservableInput<K>} project - A function that, when applied to an item emitted by the
 * source Observable, returns a projected Observable.
 */
function exhaustMapWithTrailing(project) {
    return (source) => rxjs_1.defer(() => {
        const release = new rxjs_1.Subject();
        return source.pipe(operators_1.throttle(() => release, {
            leading: true,
            trailing: true,
        }), operators_1.exhaustMap((value, index) => rxjs_1.scheduled(project(value, index), rxjs_1.asapScheduler).pipe(operators_1.finalize(() => {
            release.next();
        }))));
    });
}
exports.exhaustMapWithTrailing = exhaustMapWithTrailing;
/**
 * Like exhaustMap, but also includes the trailing value emitted from the source observable while waiting for the preceding inner observable to complete
 *
 * Original code adapted from https://github.com/ReactiveX/rxjs/issues/5004
 * @param {ObservableInput} innerObservable An Observable to replace each value from
 * the source Observable.
 */
function exhaustMapToWithTrailing(innerObservable) {
    return exhaustMapWithTrailing(() => innerObservable);
}
exports.exhaustMapToWithTrailing = exhaustMapToWithTrailing;
