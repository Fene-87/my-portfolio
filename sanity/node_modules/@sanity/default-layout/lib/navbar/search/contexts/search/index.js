"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SearchProvider = SearchProvider;
exports.useSearchState = useSearchState;

var _isEqual = _interopRequireDefault(require("lodash/isEqual"));

var _schema = _interopRequireDefault(require("part:@sanity/base/schema"));

var _react = _interopRequireWildcard(require("react"));

var _constants = require("../../constants");

var _recentSearches = require("../../datastores/recentSearches");

var _useSearch2 = require("../../hooks/useSearch");

var _hasSearchableTerms = require("../../utils/hasSearchableTerms");

var _isRecentSearchTerms = require("../../utils/isRecentSearchTerms");

var _reducer = require("./reducer");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var SearchContext = /*#__PURE__*/(0, _react.createContext)(undefined);

/**
 * @internal
 */
function SearchProvider(_ref) {
  var children = _ref.children,
      currentUser = _ref.currentUser;
  // Create local storage store
  var recentSearchesStore = (0, _react.useMemo)(() => (0, _recentSearches.createRecentSearchesStore)(_schema.default, currentUser), [currentUser]);
  var recentSearches = (0, _react.useMemo)(() => recentSearchesStore === null || recentSearchesStore === void 0 ? void 0 : recentSearchesStore.getRecentSearchTerms(), [recentSearchesStore]);
  var initialState = (0, _react.useMemo)(() => (0, _reducer.initialSearchState)(currentUser, recentSearches), [currentUser, recentSearches]);

  var _useReducer = (0, _react.useReducer)(_reducer.searchReducer, initialState),
      _useReducer2 = _slicedToArray(_useReducer, 2),
      state = _useReducer2[0],
      dispatch = _useReducer2[1];

  var ordering = state.ordering,
      pageIndex = state.pageIndex,
      result = state.result,
      terms = state.terms;
  var isMountedRef = (0, _react.useRef)(false);
  var previousOrderingRef = (0, _react.useRef)(initialState.ordering);
  var previousPageIndexRef = (0, _react.useRef)(initialState.pageIndex);
  var previousTermsRef = (0, _react.useRef)(initialState.terms);

  var _useSearch = (0, _useSearch2.useSearch)({
    initialState: _objectSpread(_objectSpread({}, result), {}, {
      terms
    }),
    onComplete: hits => dispatch({
      hits,
      type: 'SEARCH_REQUEST_COMPLETE'
    }),
    onError: error => dispatch({
      error,
      type: 'SEARCH_REQUEST_ERROR'
    }),
    onStart: () => dispatch({
      type: 'SEARCH_REQUEST_START'
    }),
    schema: _schema.default
  }),
      handleSearch = _useSearch.handleSearch,
      searchState = _useSearch.searchState;

  var hasValidTerms = (0, _hasSearchableTerms.hasSearchableTerms)(terms);
  /**
   * Trigger search when any terms (query or selected types) OR current pageIndex has changed
   *
   * Note that we compare inbound terms with our last local snapshot, and not the value of
   * `searchState` from `useSearch`, as that only contains a reference to the last fully _executed_ request.
   * There are cases were we may not run searches when terms change (e.g. when search terms are empty / invalid).
   */

  (0, _react.useEffect)(() => {
    var orderingChanged = !(0, _isEqual.default)(ordering, previousOrderingRef.current);
    var pageIndexChanged = pageIndex !== previousPageIndexRef.current;
    var termsChanged = !(0, _isEqual.default)(terms, previousTermsRef.current);

    if (orderingChanged || pageIndexChanged || termsChanged) {
      // Use a custom label if provided, otherwise return field and direction, e.g. `_updatedAt desc`
      var sortLabel = (ordering === null || ordering === void 0 ? void 0 : ordering.customMeasurementLabel) || "".concat(ordering.sort.field, " ").concat(ordering.sort.direction);
      handleSearch({
        options: {
          // Comments prepended to each query for future measurement
          comments: ["findability-mvi:".concat(_constants.FINDABILITY_MVI), ...((0, _isRecentSearchTerms.isRecentSearchTerms)(terms) ? ["findability-recent-search:".concat(terms.__recent.index)] : []), "findability-selected-types:".concat(terms.types.length), "findability-sort:".concat(sortLabel)],
          limit: _constants.SEARCH_LIMIT,
          offset: pageIndex * _constants.SEARCH_LIMIT,
          skipSortByScore: ordering.ignoreScore,
          sort: ordering.sort
        },
        terms
      }); // Update pageIndex snapshot only on a valid search request

      previousPageIndexRef.current = pageIndex;
    } // Update snapshots, even if no search request was executed


    previousOrderingRef.current = ordering;
    previousTermsRef.current = terms;
  }, [handleSearch, hasValidTerms, ordering, pageIndex, searchState.terms, terms]);
  /**
   * Reset search hits / state when (after initial amount):
   * - we have no valid search terms and
   * - we have existing hits
   */

  (0, _react.useEffect)(() => {
    if (!hasValidTerms && isMountedRef !== null && isMountedRef !== void 0 && isMountedRef.current && result.hits.length > 0) {
      dispatch({
        type: 'SEARCH_CLEAR'
      });
    }

    isMountedRef.current = true;
  }, [dispatch, hasValidTerms, result.hits, terms.query, terms.types]);
  return /*#__PURE__*/_react.default.createElement(SearchContext.Provider, {
    value: {
      dispatch,
      recentSearchesStore,
      state
    }
  }, children);
}

function useSearchState() {
  var context = (0, _react.useContext)(SearchContext);

  if (context === undefined) {
    throw new Error('useSearchState must be used within an SearchProvider');
  }

  return context;
}