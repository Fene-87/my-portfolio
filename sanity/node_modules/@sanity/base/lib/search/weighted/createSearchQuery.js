"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DEFAULT_LIMIT = void 0;
exports.createSearchQuery = createSearchQuery;
exports.extractTermsFromQuery = extractTermsFromQuery;

var _words2 = _interopRequireDefault(require("lodash/words"));

var _uniq2 = _interopRequireDefault(require("lodash/uniq"));

var _union2 = _interopRequireDefault(require("lodash/union"));

var _trim2 = _interopRequireDefault(require("lodash/trim"));

var _toLower2 = _interopRequireDefault(require("lodash/toLower"));

var _flow2 = _interopRequireDefault(require("lodash/flow"));

var _flatten2 = _interopRequireDefault(require("lodash/flatten"));

var _compact2 = _interopRequireDefault(require("lodash/compact"));

var _searchUtils = require("../../util/searchUtils");

var _tokenize = require("../common/tokenize");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var DEFAULT_LIMIT = 1000;
exports.DEFAULT_LIMIT = DEFAULT_LIMIT;
var combinePaths = (0, _flow2.default)([_flatten2.default, _union2.default, _compact2.default]);
/**
 * Create an object containing all available document types and weighted paths, used to construct a GROQ query for search.
 * System fields `_id` and `_type` are included by default.
 *
 * If `optimizeIndexPaths` is true, this will will convert all `__experimental_search` paths containing numbers
 * into array syntax. E.g. ['cover', 0, 'cards', 0, 'title'] => "cover[].cards[].title"
 *
 * This optimization will yield more search results than may be intended, but offers better performance over arrays with indices.
 * (which are currently unoptimizable by Content Lake)
 */

function createSearchSpecs(types, optimizeIndexedPaths) {
  var hasIndexedPaths = false;
  var specs = types.map(type => ({
    typeName: type.name,
    paths: type.__experimental_search.map(config => {
      var path = config.path.map(p => {
        if (typeof p === 'number') {
          hasIndexedPaths = true;

          if (optimizeIndexedPaths) {
            return [];
          }
        }

        return p;
      });
      return {
        weight: config.weight,
        path: (0, _searchUtils.joinPath)(path),
        mapWith: config.mapWith
      };
    })
  }));
  return {
    specs,
    hasIndexedPaths
  };
}

var pathWithMapper = _ref => {
  var mapWith = _ref.mapWith,
      path = _ref.path;
  return mapWith ? "".concat(mapWith, "(").concat(path, ")") : path;
};
/**
 * Create GROQ constraints, given search terms and the full spec of available document types and fields.
 * Essentially a large list of all possible fields (joined by logical OR) to match our search terms against.
 */


function createConstraints(terms, specs) {
  var combinedSearchPaths = combinePaths(specs.map(configForType => configForType.paths.map(opt => pathWithMapper(opt))));
  var constraints = terms.map((_term, i) => combinedSearchPaths.map(joinedPath => "".concat(joinedPath, " match $t").concat(i))).filter(constraint => constraint.length > 0);
  return constraints.map(constraint => "(".concat(constraint.join(' || '), ")"));
}
/**
 * Convert a string into an array of tokenized terms.
 *
 * Any (multi word) text wrapped in double quotes will be treated as "phrases", or separate tokens that
 * will not have its special characters removed.
 * E.g.`"the" "fantastic mr" fox fox book` => ["the", `"fantastic mr"`, "fox", "book"]
 *
 * Phrases wrapped in quotes are assigned relevance scoring differently from regular words.
 */


function extractTermsFromQuery(query) {
  var quotedQueries = [];
  var unquotedQuery = query.replace(/("[^"]*")/g, match => {
    if ((0, _words2.default)(match).length > 1) {
      quotedQueries.push(match);
      return '';
    }

    return match;
  }); // Lowercase and trim quoted queries

  var quotedTerms = quotedQueries.map(str => (0, _trim2.default)((0, _toLower2.default)(str)));
  /**
   * Convert (remaining) search query into an array of deduped, sanitized tokens.
   * All white space and special characters are removed.
   * e.g. "The saint of Saint-Germain-des-PrÃ©s" => ['the', 'saint', 'of', 'germain', 'des', 'pres']
   */

  var remainingTerms = (0, _uniq2.default)((0, _compact2.default)((0, _tokenize.tokenize)((0, _toLower2.default)(unquotedQuery))));
  return [...quotedTerms, ...remainingTerms];
}

function createSearchQuery(searchTerms) {
  var _searchOpts$sort, _searchOpts$sort2, _searchOpts$offset, _searchOpts$limit;

  var searchOpts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var filter = searchOpts.filter,
      params = searchOpts.params,
      tag = searchOpts.tag;
  /**
   * First pass: create initial search specs and determine if this subset of types contains
   * any indexed paths in `__experimental_search`.
   * e.g. "authors.0.title" or ["authors", 0, "title"]
   */

  var _createSearchSpecs = createSearchSpecs(searchTerms.types, false),
      exactSearchSpecs = _createSearchSpecs.specs,
      hasIndexedPaths = _createSearchSpecs.hasIndexedPaths; // Extract search terms from string query, factoring in phrases wrapped in quotes


  var terms = extractTermsFromQuery(searchTerms.query);
  /**
   * Second pass: create an optimized spec (with array indices removed), but only if types with any
   * indexed paths have been previously found. Otherwise, passthrough original search specs.
   *
   * These optimized specs are only used when building constraints in this search query.
   */

  var optimizedSpecs = hasIndexedPaths ? createSearchSpecs(searchTerms.types, true).specs : exactSearchSpecs; // Construct search filters used in this GROQ query

  var filters = ['_type in $__types', searchOpts.includeDrafts === false && "!(_id in path('drafts.**'))", ...createConstraints(terms, optimizedSpecs), filter ? "(".concat(filter, ")") : ''].filter(Boolean);
  var selections = exactSearchSpecs.map(spec => {
    var constraint = "_type == \"".concat(spec.typeName, "\" => ");
    var selection = "{ ".concat(spec.paths.map((cfg, i) => "\"w".concat(i, "\": ").concat(pathWithMapper(cfg))), " }");
    return "".concat(constraint).concat(selection);
  });
  var selection = selections.length > 0 ? "...select(".concat(selections.join(',\n'), ")") : ''; // Default to `_id asc` (GROQ default) if no search sort is provided

  var sortDirection = (searchOpts === null || searchOpts === void 0 ? void 0 : (_searchOpts$sort = searchOpts.sort) === null || _searchOpts$sort === void 0 ? void 0 : _searchOpts$sort.direction) || 'asc';
  var sortField = (searchOpts === null || searchOpts === void 0 ? void 0 : (_searchOpts$sort2 = searchOpts.sort) === null || _searchOpts$sort2 === void 0 ? void 0 : _searchOpts$sort2.field) || '_id';
  var query = "*[".concat(filters.join(' && '), "]") + "| order(".concat(sortField, " ").concat(sortDirection, ")") + "[$__offset...$__limit]" + // the following would improve search quality for paths-with-numbers, but increases the size of the query by up to 50%
  // `${hasIndexedPaths ? `[${createConstraints(terms, exactSearchSpec).join(' && ')}]` : ''}` +
  "{_type, _id, ".concat(selection, "}"); // Prepend optional GROQ comments to query

  var groqComments = ((searchOpts === null || searchOpts === void 0 ? void 0 : searchOpts.comments) || []).map(s => "// ".concat(s)).join('\n');
  var updatedQuery = groqComments ? "".concat(groqComments, "\n").concat(query) : query;
  var offset = (_searchOpts$offset = searchOpts === null || searchOpts === void 0 ? void 0 : searchOpts.offset) !== null && _searchOpts$offset !== void 0 ? _searchOpts$offset : 0;
  var limit = ((_searchOpts$limit = searchOpts === null || searchOpts === void 0 ? void 0 : searchOpts.limit) !== null && _searchOpts$limit !== void 0 ? _searchOpts$limit : DEFAULT_LIMIT) + offset;
  return {
    query: updatedQuery,
    params: _objectSpread(_objectSpread({}, toGroqParams(terms)), {}, {
      __types: exactSearchSpecs.map(spec => spec.typeName),
      __limit: limit,
      __offset: offset
    }, params || {}),
    options: {
      tag
    },
    searchSpec: exactSearchSpecs,
    terms
  };
}

var toGroqParams = terms => {
  var params = {};
  return terms.reduce((acc, term, i) => {
    acc["t".concat(i)] = "".concat(term, "*"); // "t" is short for term

    return acc;
  }, params);
};