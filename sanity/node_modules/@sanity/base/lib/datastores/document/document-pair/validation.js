"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.validation = void 0;

var _omit2 = _interopRequireDefault(require("lodash/omit"));

var _operators = require("rxjs/operators");

var _rxjs = require("rxjs");

var _schema = _interopRequireDefault(require("part:@sanity/base/schema"));

var _validation = require("@sanity/validation");

var _types = require("@sanity/types");

var _jsonReduce = _interopRequireDefault(require("json-reduce"));

var _shallowEquals = _interopRequireDefault(require("shallow-equals"));

var _rxjsExhaustmapWithTrailing = require("rxjs-exhaustmap-with-trailing");

var _createMemoizer = require("../utils/createMemoizer");

var _availability = require("../../../preview/availability");

var _editState = require("./editState");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var INITIAL_VALIDATION_STATUS = {
  isValidating: true,
  markers: [],
  revision: null
};

function findReferenceIds(obj) {
  return (0, _jsonReduce.default)(obj, (acc, node) => {
    if ((0, _types.isReference)(node)) {
      acc.add(node._ref);
    }

    return acc;
  }, new Set());
}

var EMPTY_ARRAY = [];

var listenDocumentExists = id => (0, _availability.observeDocumentPairAvailability)(id).pipe((0, _operators.map)(_ref => {
  var published = _ref.published;
  return published.available;
})); // throttle delay for document updates (i.e. time between responding to changes in the current document)


var DOC_UPDATE_DELAY = 200; // throttle delay for referenced document updates (i.e. time between responding to changes in referenced documents)

var REF_UPDATE_DELAY = 1000;
var validation = (0, _createMemoizer.memoize)((_ref2, typeName) => {
  var draftId = _ref2.draftId,
      publishedId = _ref2.publishedId;
  var document$ = (0, _editState.editState)({
    draftId,
    publishedId
  }, typeName).pipe((0, _operators.map)(_ref3 => {
    var draft = _ref3.draft,
        published = _ref3.published;
    return draft || published;
  }), (0, _operators.throttleTime)(DOC_UPDATE_DELAY, _rxjs.asyncScheduler, {
    trailing: true
  }), (0, _operators.distinctUntilChanged)((prev, next) => {
    if ((prev === null || prev === void 0 ? void 0 : prev._rev) === (next === null || next === void 0 ? void 0 : next._rev)) {
      return true;
    } // _rev and _updatedAt may change without other fields changing (due to a limitation in mutator)
    // so only pass on documents if _other_ attributes changes


    return (0, _shallowEquals.default)((0, _omit2.default)(prev, '_rev', '_updatedAt'), (0, _omit2.default)(next, '_rev', '_updatedAt'));
  }), (0, _operators.share)());
  var referenceIds$ = document$.pipe((0, _operators.map)(document => findReferenceIds(document)), (0, _operators.mergeMap)(ids => (0, _rxjs.from)(ids))); // Note: we only use this to trigger a re-run of validation when a referenced document is published/unpublished

  var referenceExistence$ = referenceIds$.pipe((0, _operators.groupBy)(id => id, null, () => (0, _rxjs.timer)(1000 * 60 * 30)), (0, _operators.mergeMap)(id$ => id$.pipe((0, _operators.distinct)(), (0, _operators.mergeMap)(id => listenDocumentExists(id).pipe((0, _operators.map)( // eslint-disable-next-line max-nested-callbacks
  result => [id, result]))))), (0, _operators.scan)((acc, _ref4) => {
    var _ref5 = _slicedToArray(_ref4, 2),
        id = _ref5[0],
        result = _ref5[1];

    if (Boolean(acc[id]) === result) {
      return acc;
    }

    return result ? _objectSpread(_objectSpread({}, acc), {}, {
      [id]: result
    }) : (0, _omit2.default)(acc, id);
  }, {}), (0, _operators.distinctUntilChanged)(_shallowEquals.default), (0, _operators.shareReplay)({
    refCount: true,
    bufferSize: 1
  })); // Provided to individual validation functions to support using existence of a weakly referenced document
  // as part of the validation rule (used by references in place)

  var getDocumentExists = _ref6 => {
    var id = _ref6.id;
    return referenceExistence$.pipe((0, _operators.first)(), (0, _operators.map)(referenceExistence => referenceExistence[id])).toPromise();
  };

  var referenceDocumentUpdates$ = referenceExistence$.pipe( // we'll skip the first emission since the document already gets an initial validation pass
  // we're only interested in updates in referenced documents after that
  (0, _operators.skip)(1), (0, _operators.throttleTime)(REF_UPDATE_DELAY, _rxjs.asyncScheduler, {
    leading: true,
    trailing: true
  }));
  return (0, _rxjs.combineLatest)([document$, (0, _rxjs.concat)((0, _rxjs.of)(null), referenceDocumentUpdates$)]).pipe((0, _operators.map)(_ref7 => {
    var _ref8 = _slicedToArray(_ref7, 1),
        document = _ref8[0];

    return document;
  }), (0, _rxjsExhaustmapWithTrailing.exhaustMapWithTrailing)(document => {
    return (0, _rxjs.defer)(() => {
      if (!(document !== null && document !== void 0 && document._type)) {
        return (0, _rxjs.of)({
          markers: EMPTY_ARRAY,
          isValidating: false
        });
      }

      return (0, _rxjs.concat)((0, _rxjs.of)({
        isValidating: true,
        revision: document._rev
      }), (0, _validation.validateDocumentObservable)(document, _schema.default, {
        getDocumentExists
      }).pipe((0, _operators.map)(markers => ({
        markers,
        isValidating: false
      }))));
    });
  }), (0, _operators.scan)((acc, next) => _objectSpread(_objectSpread({}, acc), next), INITIAL_VALIDATION_STATUS), (0, _operators.publishReplay)(1), (0, _operators.refCount)());
}, idPair => idPair.publishedId);
exports.validation = validation;