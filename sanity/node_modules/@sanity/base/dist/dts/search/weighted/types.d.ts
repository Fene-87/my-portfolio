import { ExperimentalSearchPath } from '@sanity/types';
/**
 * @internal
 */
export interface SearchTerms {
    query: string;
    types: SearchableType[];
}
/**
 * @internal
 */
export interface SearchableType {
    name: string;
    title?: string;
    __experimental_search: ExperimentalSearchPath[];
}
/**
 * @internal
 */
export interface SearchPath {
    weight: number;
    path: string;
    mapWith?: string;
}
/**
 * @internal
 */
export interface SearchSpec {
    typeName: string;
    paths: SearchPath[];
}
/**
 * @internal
 */
export interface SearchHit {
    _type: string;
    _id: string;
    [key: string]: unknown;
}
/**
 * @internal
 */
export interface SearchStory {
    path: string;
    score: number;
    why: string;
}
/**
 * @alpha
 */
export interface WeightedHit {
    hit: SearchHit;
    resultIndex: number;
    score: number;
    stories: SearchStory[];
}
/**
 * @alpha
 */
export interface WeightedSearchOptions {
    filter?: string;
    params?: Record<string, unknown>;
    tag?: string;
    unique?: boolean;
}
/**
 * @internal
 */
export interface SearchOptions {
    comments?: string[];
    includeDrafts?: boolean;
    limit?: number;
    offset?: number;
    skipSortByScore?: boolean;
    sort?: SearchSort;
}
export declare type SortDirection = 'asc' | 'desc';
export declare type SearchSort = {
    direction: SortDirection;
    field: string;
};
//# sourceMappingURL=types.d.ts.map