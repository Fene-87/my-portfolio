import { SearchHit, WeightedHit, SearchSpec } from './types';
declare type SearchScore = [number, string];
export declare const calculateScore: (searchTerms: string[], value: string) => SearchScore;
export declare function applyWeights(searchSpec: SearchSpec[], hits: SearchHit[], terms?: string[]): WeightedHit[];
/**
 * For phrases: score on the total number of matching characters.
 * E.g. given the phrases ["the fox", "of london"] for the target value "the wily fox of london"
 *
 * - "the fox" isn't included in the target value (score: 0)
 * - "of london" is included in the target value, and 9 out of 22 characters match (score: 9/22 = ~0.408)
 * - non-exact matches have their score divided in half (final score: ~0.204)
 */
export declare function calculatePhraseScore(uniqueSearchPhrases: string[], value: string): SearchScore;
/**
 * For words: score on the total number of matching words.
 * E.g. given the words ["the", "fox", "of", "london"] for the target value "the wily fox of london"
 *
 * - 4 out of 5 words match (score: 4/5 = 0.8)
 * - non-exact matches have their score divided in half (final score: 0.4)
 */
export declare function calculateWordScore(uniqueSearchTerms: string[], value: string): SearchScore;
export declare function partitionAndSanitizeSearchTerms(searchTerms: string[]): {
    phrases: string[];
    words: string[];
};
export {};
//# sourceMappingURL=applyWeights.d.ts.map