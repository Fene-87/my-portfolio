import type { SearchOptions, SearchSpec, SearchTerms, WeightedSearchOptions } from './types';
export interface SearchParams {
    __types: string[];
    __limit: number;
    __offset: number;
    [key: string]: unknown;
}
export interface SearchQuery {
    query: string;
    params: SearchParams;
    options: Record<string, unknown>;
    searchSpec: SearchSpec[];
    terms: string[];
}
export declare const DEFAULT_LIMIT = 1000;
/**
 * Convert a string into an array of tokenized terms.
 *
 * Any (multi word) text wrapped in double quotes will be treated as "phrases", or separate tokens that
 * will not have its special characters removed.
 * E.g.`"the" "fantastic mr" fox fox book` => ["the", `"fantastic mr"`, "fox", "book"]
 *
 * Phrases wrapped in quotes are assigned relevance scoring differently from regular words.
 */
export declare function extractTermsFromQuery(query: string): string[];
export declare function createSearchQuery(searchTerms: SearchTerms, searchOpts?: SearchOptions & WeightedSearchOptions): SearchQuery;
//# sourceMappingURL=createSearchQuery.d.ts.map